# Generated by the gRpc Python protocol compiler plugin. DO NOT EDIT!
"""Client and server classes corresponding to protobuf-defined services."""
import grpc
import warnings

from common.gRpc.auth import auth_pb2 as auth_dot_auth__pb2

GRPC_GENERATED_VERSION = "1.70.0"
GRPC_VERSION = grpc.__version__
_version_not_supported = False

try:
    from grpc._utilities import first_version_is_lower

    _version_not_supported = first_version_is_lower(
        GRPC_VERSION, GRPC_GENERATED_VERSION
    )
except ImportError:
    _version_not_supported = True

if _version_not_supported:
    raise RuntimeError(
        f"The grpc package installed is at version {GRPC_VERSION},"
        + f" but the generated code in auth/auth_pb2_grpc.py depends on"
        + f" grpcio>={GRPC_GENERATED_VERSION}."
        + f" Please upgrade your grpc module to grpcio>={GRPC_GENERATED_VERSION}"
        + f" or downgrade your generated code using grpcio-tools<={GRPC_VERSION}."
    )


class AuthServiceStub(object):
    """Missing associated documentation comment in .proto file."""

    def __init__(self, channel):
        """Constructor.

        Args:
            channel: A grpc.Channel.
        """
        self.CheckAccess = channel.unary_unary(
            "/auth.AuthService/CheckAccess",
            request_serializer=auth_dot_auth__pb2.CheckAccessRequest.SerializeToString,
            response_deserializer=auth_dot_auth__pb2.CheckAccessResponse.FromString,
            _registered_method=True,
        )
        self.GetNewTokens = channel.unary_unary(
            "/auth.AuthService/GetNewTokens",
            request_serializer=auth_dot_auth__pb2.GetNewTokensRequest.SerializeToString,
            response_deserializer=auth_dot_auth__pb2.GetNewTokensResponse.FromString,
            _registered_method=True,
        )
        self.Login = channel.unary_unary(
            "/auth.AuthService/Login",
            request_serializer=auth_dot_auth__pb2.LoginRequest.SerializeToString,
            response_deserializer=auth_dot_auth__pb2.LoginResponse.FromString,
            _registered_method=True,
        )
        self.Logout = channel.unary_unary(
            "/auth.AuthService/Logout",
            request_serializer=auth_dot_auth__pb2.LogoutRequest.SerializeToString,
            response_deserializer=auth_dot_auth__pb2.LogoutResponse.FromString,
            _registered_method=True,
        )
        self.Registrate = channel.unary_unary(
            "/auth.AuthService/Registrate",
            request_serializer=auth_dot_auth__pb2.RegistrateRequest.SerializeToString,
            response_deserializer=auth_dot_auth__pb2.RegistrateResponse.FromString,
            _registered_method=True,
        )
        self.Verify_2fa = channel.unary_unary(
            "/auth.AuthService/Verify_2fa",
            request_serializer=auth_dot_auth__pb2.Verify2faRequest.SerializeToString,
            response_deserializer=auth_dot_auth__pb2.Verify2faResponse.FromString,
            _registered_method=True,
        )
        self.Handle_google_callback = channel.unary_unary(
            "/auth.AuthService/Handle_google_callback",
            request_serializer=auth_dot_auth__pb2.HandleGoogleCallbackRequest.SerializeToString,
            response_deserializer=auth_dot_auth__pb2.HandleGoogleCallbackResponse.FromString,
            _registered_method=True,
        )
        self.Get_google_auth_url = channel.unary_unary(
            "/auth.AuthService/Get_google_auth_url",
            request_serializer=auth_dot_auth__pb2.GetGoogleAuthUrlRequest.SerializeToString,
            response_deserializer=auth_dot_auth__pb2.GetGoogleAuthUrlResponse.FromString,
            _registered_method=True,
        )


class AuthServiceServicer(object):
    """Missing associated documentation comment in .proto file."""

    def CheckAccess(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details("Method not implemented!")
        raise NotImplementedError("Method not implemented!")

    def GetNewTokens(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details("Method not implemented!")
        raise NotImplementedError("Method not implemented!")

    def Login(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details("Method not implemented!")
        raise NotImplementedError("Method not implemented!")

    def Logout(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details("Method not implemented!")
        raise NotImplementedError("Method not implemented!")

    def Registrate(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details("Method not implemented!")
        raise NotImplementedError("Method not implemented!")

    def Verify_2fa(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details("Method not implemented!")
        raise NotImplementedError("Method not implemented!")

    def Handle_google_callback(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details("Method not implemented!")
        raise NotImplementedError("Method not implemented!")

    def Get_google_auth_url(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details("Method not implemented!")
        raise NotImplementedError("Method not implemented!")


def add_AuthServiceServicer_to_server(servicer, server):
    rpc_method_handlers = {
        "CheckAccess": grpc.unary_unary_rpc_method_handler(
            servicer.CheckAccess,
            request_deserializer=auth_dot_auth__pb2.CheckAccessRequest.FromString,
            response_serializer=auth_dot_auth__pb2.CheckAccessResponse.SerializeToString,
        ),
        "GetNewTokens": grpc.unary_unary_rpc_method_handler(
            servicer.GetNewTokens,
            request_deserializer=auth_dot_auth__pb2.GetNewTokensRequest.FromString,
            response_serializer=auth_dot_auth__pb2.GetNewTokensResponse.SerializeToString,
        ),
        "Login": grpc.unary_unary_rpc_method_handler(
            servicer.Login,
            request_deserializer=auth_dot_auth__pb2.LoginRequest.FromString,
            response_serializer=auth_dot_auth__pb2.LoginResponse.SerializeToString,
        ),
        "Logout": grpc.unary_unary_rpc_method_handler(
            servicer.Logout,
            request_deserializer=auth_dot_auth__pb2.LogoutRequest.FromString,
            response_serializer=auth_dot_auth__pb2.LogoutResponse.SerializeToString,
        ),
        "Registrate": grpc.unary_unary_rpc_method_handler(
            servicer.Registrate,
            request_deserializer=auth_dot_auth__pb2.RegistrateRequest.FromString,
            response_serializer=auth_dot_auth__pb2.RegistrateResponse.SerializeToString,
        ),
        "Verify_2fa": grpc.unary_unary_rpc_method_handler(
            servicer.Verify_2fa,
            request_deserializer=auth_dot_auth__pb2.Verify2faRequest.FromString,
            response_serializer=auth_dot_auth__pb2.Verify2faResponse.SerializeToString,
        ),
        "Handle_google_callback": grpc.unary_unary_rpc_method_handler(
            servicer.Handle_google_callback,
            request_deserializer=auth_dot_auth__pb2.HandleGoogleCallbackRequest.FromString,
            response_serializer=auth_dot_auth__pb2.HandleGoogleCallbackResponse.SerializeToString,
        ),
        "Get_google_auth_url": grpc.unary_unary_rpc_method_handler(
            servicer.Get_google_auth_url,
            request_deserializer=auth_dot_auth__pb2.GetGoogleAuthUrlRequest.FromString,
            response_serializer=auth_dot_auth__pb2.GetGoogleAuthUrlResponse.SerializeToString,
        ),
    }
    generic_handler = grpc.method_handlers_generic_handler(
        "auth.AuthService", rpc_method_handlers
    )
    server.add_generic_rpc_handlers((generic_handler,))
    server.add_registered_method_handlers("auth.AuthService", rpc_method_handlers)


# This class is part of an EXPERIMENTAL API.
class AuthService(object):
    """Missing associated documentation comment in .proto file."""

    @staticmethod
    def CheckAccess(
        request,
        target,
        options=(),
        channel_credentials=None,
        call_credentials=None,
        insecure=False,
        compression=None,
        wait_for_ready=None,
        timeout=None,
        metadata=None,
    ):
        return grpc.experimental.unary_unary(
            request,
            target,
            "/auth.AuthService/CheckAccess",
            auth_dot_auth__pb2.CheckAccessRequest.SerializeToString,
            auth_dot_auth__pb2.CheckAccessResponse.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
            _registered_method=True,
        )

    @staticmethod
    def GetNewTokens(
        request,
        target,
        options=(),
        channel_credentials=None,
        call_credentials=None,
        insecure=False,
        compression=None,
        wait_for_ready=None,
        timeout=None,
        metadata=None,
    ):
        return grpc.experimental.unary_unary(
            request,
            target,
            "/auth.AuthService/GetNewTokens",
            auth_dot_auth__pb2.GetNewTokensRequest.SerializeToString,
            auth_dot_auth__pb2.GetNewTokensResponse.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
            _registered_method=True,
        )

    @staticmethod
    def Login(
        request,
        target,
        options=(),
        channel_credentials=None,
        call_credentials=None,
        insecure=False,
        compression=None,
        wait_for_ready=None,
        timeout=None,
        metadata=None,
    ):
        return grpc.experimental.unary_unary(
            request,
            target,
            "/auth.AuthService/Login",
            auth_dot_auth__pb2.LoginRequest.SerializeToString,
            auth_dot_auth__pb2.LoginResponse.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
            _registered_method=True,
        )

    @staticmethod
    def Logout(
        request,
        target,
        options=(),
        channel_credentials=None,
        call_credentials=None,
        insecure=False,
        compression=None,
        wait_for_ready=None,
        timeout=None,
        metadata=None,
    ):
        return grpc.experimental.unary_unary(
            request,
            target,
            "/auth.AuthService/Logout",
            auth_dot_auth__pb2.LogoutRequest.SerializeToString,
            auth_dot_auth__pb2.LogoutResponse.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
            _registered_method=True,
        )

    @staticmethod
    def Registrate(
        request,
        target,
        options=(),
        channel_credentials=None,
        call_credentials=None,
        insecure=False,
        compression=None,
        wait_for_ready=None,
        timeout=None,
        metadata=None,
    ):
        return grpc.experimental.unary_unary(
            request,
            target,
            "/auth.AuthService/Registrate",
            auth_dot_auth__pb2.RegistrateRequest.SerializeToString,
            auth_dot_auth__pb2.RegistrateResponse.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
            _registered_method=True,
        )

    @staticmethod
    def Verify_2fa(
        request,
        target,
        options=(),
        channel_credentials=None,
        call_credentials=None,
        insecure=False,
        compression=None,
        wait_for_ready=None,
        timeout=None,
        metadata=None,
    ):
        return grpc.experimental.unary_unary(
            request,
            target,
            "/auth.AuthService/Verify_2fa",
            auth_dot_auth__pb2.Verify2faRequest.SerializeToString,
            auth_dot_auth__pb2.Verify2faResponse.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
            _registered_method=True,
        )

    @staticmethod
    def Handle_google_callback(
        request,
        target,
        options=(),
        channel_credentials=None,
        call_credentials=None,
        insecure=False,
        compression=None,
        wait_for_ready=None,
        timeout=None,
        metadata=None,
    ):
        return grpc.experimental.unary_unary(
            request,
            target,
            "/auth.AuthService/Handle_google_callback",
            auth_dot_auth__pb2.HandleGoogleCallbackRequest.SerializeToString,
            auth_dot_auth__pb2.HandleGoogleCallbackResponse.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
            _registered_method=True,
        )

    @staticmethod
    def Get_google_auth_url(
        request,
        target,
        options=(),
        channel_credentials=None,
        call_credentials=None,
        insecure=False,
        compression=None,
        wait_for_ready=None,
        timeout=None,
        metadata=None,
    ):
        return grpc.experimental.unary_unary(
            request,
            target,
            "/auth.AuthService/Get_google_auth_url",
            auth_dot_auth__pb2.GetGoogleAuthUrlRequest.SerializeToString,
            auth_dot_auth__pb2.GetGoogleAuthUrlResponse.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
            _registered_method=True,
        )
