# Generated by the gRPC Python protocol compiler plugin. DO NOT EDIT!
"""Client and server classes corresponding to protobuf-defined services."""
import grpc
import warnings

from common.gRpc.wallet_service import wallet_pb2 as wallet__service_dot_wallet__pb2

GRPC_GENERATED_VERSION = "1.70.0"
GRPC_VERSION = grpc.__version__
_version_not_supported = False

try:
    from grpc._utilities import first_version_is_lower

    _version_not_supported = first_version_is_lower(
        GRPC_VERSION, GRPC_GENERATED_VERSION
    )
except ImportError:
    _version_not_supported = True

if _version_not_supported:
    raise RuntimeError(
        f"The grpc package installed is at version {GRPC_VERSION},"
        + f" but the generated code in wallet_service/wallet_pb2_grpc.py depends on"
        + f" grpcio>={GRPC_GENERATED_VERSION}."
        + f" Please upgrade your grpc module to grpcio>={GRPC_GENERATED_VERSION}"
        + f" or downgrade your generated code using grpcio-tools<={GRPC_VERSION}."
    )


class WalletServiceStub(object):
    """Missing associated documentation comment in .proto file."""

    def __init__(self, channel):
        """Constructor.

        Args:
            channel: A grpc.Channel.
        """
        self.CreateWallet = channel.unary_unary(
            "/wallet.WalletService/CreateWallet",
            request_serializer=wallet__service_dot_wallet__pb2.CreateWalletRequest.SerializeToString,
            response_deserializer=wallet__service_dot_wallet__pb2.WalletResponse.FromString,
            _registered_method=True,
        )
        self.GetBalance = channel.unary_unary(
            "/wallet.WalletService/GetBalance",
            request_serializer=wallet__service_dot_wallet__pb2.GetBalanceRequest.SerializeToString,
            response_deserializer=wallet__service_dot_wallet__pb2.BalanceResponse.FromString,
            _registered_method=True,
        )
        self.Transfer = channel.unary_unary(
            "/wallet.WalletService/Transfer",
            request_serializer=wallet__service_dot_wallet__pb2.TransferRequest.SerializeToString,
            response_deserializer=wallet__service_dot_wallet__pb2.OperationResponse.FromString,
            _registered_method=True,
        )
        self.Convert = channel.unary_unary(
            "/wallet.WalletService/Convert",
            request_serializer=wallet__service_dot_wallet__pb2.ConvertRequest.SerializeToString,
            response_deserializer=wallet__service_dot_wallet__pb2.OperationResponse.FromString,
            _registered_method=True,
        )
        self.Withdraw = channel.unary_unary(
            "/wallet.WalletService/Withdraw",
            request_serializer=wallet__service_dot_wallet__pb2.WithdrawRequest.SerializeToString,
            response_deserializer=wallet__service_dot_wallet__pb2.OperationResponse.FromString,
            _registered_method=True,
        )
        self.CreatePaymentTransaction = channel.unary_unary(
            "/wallet.WalletService/CreatePaymentTransaction",
            request_serializer=wallet__service_dot_wallet__pb2.CreatePaymentTransactionRequest.SerializeToString,
            response_deserializer=wallet__service_dot_wallet__pb2.PaymentTransactionResponse.FromString,
            _registered_method=True,
        )
        self.CreatePayoutTransaction = channel.unary_unary(
            "/wallet.WalletService/CreatePayoutTransaction",
            request_serializer=wallet__service_dot_wallet__pb2.CreatePaymentTransactionRequest.SerializeToString,
            response_deserializer=wallet__service_dot_wallet__pb2.PaymentTransactionResponse.FromString,
            _registered_method=True,
        )
        self.ConnectAccountStripe = channel.unary_unary(
            "/wallet.WalletService/ConnectAccountStripe",
            request_serializer=wallet__service_dot_wallet__pb2.ConnectAccountStripeRequest.SerializeToString,
            response_deserializer=wallet__service_dot_wallet__pb2.PaymentTransactionResponse.FromString,
            _registered_method=True,
        )
        self.HandleStripePayment = channel.unary_unary(
            "/wallet.WalletService/HandleStripePayment",
            request_serializer=wallet__service_dot_wallet__pb2.StripePaymentNotification.SerializeToString,
            response_deserializer=wallet__service_dot_wallet__pb2.WebhookResponse.FromString,
            _registered_method=True,
        )


class WalletServiceServicer(object):
    """Missing associated documentation comment in .proto file."""

    def CreateWallet(self, request, context):
        """Создание нового кошелька для пользователя"""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details("Method not implemented!")
        raise NotImplementedError("Method not implemented!")

    def GetBalance(self, request, context):
        """Получение баланса по пользователю"""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details("Method not implemented!")
        raise NotImplementedError("Method not implemented!")

    def Transfer(self, request, context):
        """Перевод средств между кошельками"""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details("Method not implemented!")
        raise NotImplementedError("Method not implemented!")

    def Convert(self, request, context):
        """Конвертация валюты в кошельке"""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details("Method not implemented!")
        raise NotImplementedError("Method not implemented!")

    def Withdraw(self, request, context):
        """Списание средств с кошелька"""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details("Method not implemented!")
        raise NotImplementedError("Method not implemented!")

    def CreatePaymentTransaction(self, request, context):
        """Создание транзакции на оплату через платежный шлюз"""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details("Method not implemented!")
        raise NotImplementedError("Method not implemented!")

    def CreatePayoutTransaction(self, request, context):
        """Создание выплаты через платежный шлюз"""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details("Method not implemented!")
        raise NotImplementedError("Method not implemented!")

    def ConnectAccountStripe(self, request, context):
        """Создание/получение аккаунта в stripe"""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details("Method not implemented!")
        raise NotImplementedError("Method not implemented!")

    def HandleStripePayment(self, request, context):
        """Callback от stripe"""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details("Method not implemented!")
        raise NotImplementedError("Method not implemented!")


def add_WalletServiceServicer_to_server(servicer, server):
    rpc_method_handlers = {
        "CreateWallet": grpc.unary_unary_rpc_method_handler(
            servicer.CreateWallet,
            request_deserializer=wallet__service_dot_wallet__pb2.CreateWalletRequest.FromString,
            response_serializer=wallet__service_dot_wallet__pb2.WalletResponse.SerializeToString,
        ),
        "GetBalance": grpc.unary_unary_rpc_method_handler(
            servicer.GetBalance,
            request_deserializer=wallet__service_dot_wallet__pb2.GetBalanceRequest.FromString,
            response_serializer=wallet__service_dot_wallet__pb2.BalanceResponse.SerializeToString,
        ),
        "Transfer": grpc.unary_unary_rpc_method_handler(
            servicer.Transfer,
            request_deserializer=wallet__service_dot_wallet__pb2.TransferRequest.FromString,
            response_serializer=wallet__service_dot_wallet__pb2.OperationResponse.SerializeToString,
        ),
        "Convert": grpc.unary_unary_rpc_method_handler(
            servicer.Convert,
            request_deserializer=wallet__service_dot_wallet__pb2.ConvertRequest.FromString,
            response_serializer=wallet__service_dot_wallet__pb2.OperationResponse.SerializeToString,
        ),
        "Withdraw": grpc.unary_unary_rpc_method_handler(
            servicer.Withdraw,
            request_deserializer=wallet__service_dot_wallet__pb2.WithdrawRequest.FromString,
            response_serializer=wallet__service_dot_wallet__pb2.OperationResponse.SerializeToString,
        ),
        "CreatePaymentTransaction": grpc.unary_unary_rpc_method_handler(
            servicer.CreatePaymentTransaction,
            request_deserializer=wallet__service_dot_wallet__pb2.CreatePaymentTransactionRequest.FromString,
            response_serializer=wallet__service_dot_wallet__pb2.PaymentTransactionResponse.SerializeToString,
        ),
        "CreatePayoutTransaction": grpc.unary_unary_rpc_method_handler(
            servicer.CreatePayoutTransaction,
            request_deserializer=wallet__service_dot_wallet__pb2.CreatePaymentTransactionRequest.FromString,
            response_serializer=wallet__service_dot_wallet__pb2.PaymentTransactionResponse.SerializeToString,
        ),
        "ConnectAccountStripe": grpc.unary_unary_rpc_method_handler(
            servicer.ConnectAccountStripe,
            request_deserializer=wallet__service_dot_wallet__pb2.ConnectAccountStripeRequest.FromString,
            response_serializer=wallet__service_dot_wallet__pb2.PaymentTransactionResponse.SerializeToString,
        ),
        "HandleStripePayment": grpc.unary_unary_rpc_method_handler(
            servicer.HandleStripePayment,
            request_deserializer=wallet__service_dot_wallet__pb2.StripePaymentNotification.FromString,
            response_serializer=wallet__service_dot_wallet__pb2.WebhookResponse.SerializeToString,
        ),
    }
    generic_handler = grpc.method_handlers_generic_handler(
        "wallet.WalletService", rpc_method_handlers
    )
    server.add_generic_rpc_handlers((generic_handler,))
    server.add_registered_method_handlers("wallet.WalletService", rpc_method_handlers)


# This class is part of an EXPERIMENTAL API.
class WalletService(object):
    """Missing associated documentation comment in .proto file."""

    @staticmethod
    def CreateWallet(
        request,
        target,
        options=(),
        channel_credentials=None,
        call_credentials=None,
        insecure=False,
        compression=None,
        wait_for_ready=None,
        timeout=None,
        metadata=None,
    ):
        return grpc.experimental.unary_unary(
            request,
            target,
            "/wallet.WalletService/CreateWallet",
            wallet__service_dot_wallet__pb2.CreateWalletRequest.SerializeToString,
            wallet__service_dot_wallet__pb2.WalletResponse.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
            _registered_method=True,
        )

    @staticmethod
    def GetBalance(
        request,
        target,
        options=(),
        channel_credentials=None,
        call_credentials=None,
        insecure=False,
        compression=None,
        wait_for_ready=None,
        timeout=None,
        metadata=None,
    ):
        return grpc.experimental.unary_unary(
            request,
            target,
            "/wallet.WalletService/GetBalance",
            wallet__service_dot_wallet__pb2.GetBalanceRequest.SerializeToString,
            wallet__service_dot_wallet__pb2.BalanceResponse.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
            _registered_method=True,
        )

    @staticmethod
    def Transfer(
        request,
        target,
        options=(),
        channel_credentials=None,
        call_credentials=None,
        insecure=False,
        compression=None,
        wait_for_ready=None,
        timeout=None,
        metadata=None,
    ):
        return grpc.experimental.unary_unary(
            request,
            target,
            "/wallet.WalletService/Transfer",
            wallet__service_dot_wallet__pb2.TransferRequest.SerializeToString,
            wallet__service_dot_wallet__pb2.OperationResponse.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
            _registered_method=True,
        )

    @staticmethod
    def Convert(
        request,
        target,
        options=(),
        channel_credentials=None,
        call_credentials=None,
        insecure=False,
        compression=None,
        wait_for_ready=None,
        timeout=None,
        metadata=None,
    ):
        return grpc.experimental.unary_unary(
            request,
            target,
            "/wallet.WalletService/Convert",
            wallet__service_dot_wallet__pb2.ConvertRequest.SerializeToString,
            wallet__service_dot_wallet__pb2.OperationResponse.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
            _registered_method=True,
        )

    @staticmethod
    def Withdraw(
        request,
        target,
        options=(),
        channel_credentials=None,
        call_credentials=None,
        insecure=False,
        compression=None,
        wait_for_ready=None,
        timeout=None,
        metadata=None,
    ):
        return grpc.experimental.unary_unary(
            request,
            target,
            "/wallet.WalletService/Withdraw",
            wallet__service_dot_wallet__pb2.WithdrawRequest.SerializeToString,
            wallet__service_dot_wallet__pb2.OperationResponse.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
            _registered_method=True,
        )

    @staticmethod
    def CreatePaymentTransaction(
        request,
        target,
        options=(),
        channel_credentials=None,
        call_credentials=None,
        insecure=False,
        compression=None,
        wait_for_ready=None,
        timeout=None,
        metadata=None,
    ):
        return grpc.experimental.unary_unary(
            request,
            target,
            "/wallet.WalletService/CreatePaymentTransaction",
            wallet__service_dot_wallet__pb2.CreatePaymentTransactionRequest.SerializeToString,
            wallet__service_dot_wallet__pb2.PaymentTransactionResponse.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
            _registered_method=True,
        )

    @staticmethod
    def CreatePayoutTransaction(
        request,
        target,
        options=(),
        channel_credentials=None,
        call_credentials=None,
        insecure=False,
        compression=None,
        wait_for_ready=None,
        timeout=None,
        metadata=None,
    ):
        return grpc.experimental.unary_unary(
            request,
            target,
            "/wallet.WalletService/CreatePayoutTransaction",
            wallet__service_dot_wallet__pb2.CreatePaymentTransactionRequest.SerializeToString,
            wallet__service_dot_wallet__pb2.PaymentTransactionResponse.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
            _registered_method=True,
        )

    @staticmethod
    def ConnectAccountStripe(
        request,
        target,
        options=(),
        channel_credentials=None,
        call_credentials=None,
        insecure=False,
        compression=None,
        wait_for_ready=None,
        timeout=None,
        metadata=None,
    ):
        return grpc.experimental.unary_unary(
            request,
            target,
            "/wallet.WalletService/ConnectAccountStripe",
            wallet__service_dot_wallet__pb2.ConnectAccountStripeRequest.SerializeToString,
            wallet__service_dot_wallet__pb2.PaymentTransactionResponse.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
            _registered_method=True,
        )

    @staticmethod
    def HandleStripePayment(
        request,
        target,
        options=(),
        channel_credentials=None,
        call_credentials=None,
        insecure=False,
        compression=None,
        wait_for_ready=None,
        timeout=None,
        metadata=None,
    ):
        return grpc.experimental.unary_unary(
            request,
            target,
            "/wallet.WalletService/HandleStripePayment",
            wallet__service_dot_wallet__pb2.StripePaymentNotification.SerializeToString,
            wallet__service_dot_wallet__pb2.WebhookResponse.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
            _registered_method=True,
        )
